{"version":3,"sources":["Login.jsx","service/Environment.js","service/HelloWorldService.js","service/HelloWorldBeanService.js","Welcome.jsx","TodoList.tsx","TodoApp.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Login","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","username","password","showSucessMessage","hasLoginFailed","handleChange","bind","assertThisInitialized","loginClick","event","setState","defineProperty","target","name","value","console","log","history","push","react_default","a","createElement","type","onChange","onClick","Component","serverUrl","_serverUrl","apply","arguments","_callee","frontendUrl","port","backendUrl","response","json","regenerator_default","wrap","_context","prev","next","info","window","location","hostname","fetch","sent","abrupt","t0","error","stop","service_HelloWorldService","cserverUrl","text","service_HelloWorldBeanService","env","message","Welcome","pops","welcomMessage","helloWorldService","helloWorldBeanService","id","HelloWorldService","getMessage","data","HelloWorldBeanService","TodoList","TodoApp","Fragment","react_router_dom","react_router","path","exact","component","ErrorMessage","App","TodoApp_TodoApp","Boolean","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.21647f9d.chunk.js","sourcesContent":["import React from 'react'\nimport {Component} from 'react'\nexport default class Login extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = { username: 'in28minutes',\n                       password: '',\n                       showSucessMessage: true,\n                       hasLoginFailed: false\n                     }\n        this.handleChange = this.handleChange.bind(this)\n        this.loginClick = this.loginClick.bind(this) \n     }\n\n /**\n * Set the evenet as a state\n *\n * @param {event}  The event to be stored.\n */\n     handleChange(event) { \n\n        this.setState({[event.target.name]\n          :event.target.value })\n      }\n\n      loginClick()   {\n        if (this.state.username ==='in28minutes' && this.state.password === 'dummy') { \n           \n            console.log('sucessfull login')\n            console.log(this.state)\n            this.props.history.push(\"/welcome\")\n\n        }\n        else \n         {\n            console.log('loging failure')\n            this.setState ( { showSucessMessage: false }) \n            this.setState (  { hasLoginFailed: true }) \n                      \n          }\n          \n\n      }\n     \n\n    render() { return <div> \n         {this.state.hasLoginFailed && <div>Invalid Credentials</div>}\n         {this.state.showSucessMessage && <div>Sucsessfull Loging</div>}\n\n        User Name:<input type='text' name='username' value= {this.state.username} onChange= {this.handleChange}/>\n        Password: <input type='password' name='password' value= {this.state.password} onChange= {this.handleChange}/>\n        <button onClick= {this.loginClick}>Login</button>\n    </div> }\n}\n"," export async function  serverUrl() {\n    try {\n      console.info('Environment')\n      const frontendUrl = window.location.hostname\n      const port = window.location.port\n      console.log(frontendUrl)\n      console.log(port)\n      const backendUrl = 'http://'+ frontendUrl + ':'+ port + '/backendUrl'\n      console.log(backendUrl)\n      let response = await fetch(backendUrl)\n      let json = await response.json()\n      console.info('Environment response')\n      console.info(json)\n      return  json\n    } catch(error)  { \n        console.error(error)\n        throw error\n    }\n      \n}","import { serverUrl } from './Environment'\nclass HelloWorldService {\n  \n  async getMessage () {\n     try {\n       console.log('HelloWorldService')\n       const cserverUrl = await serverUrl()\n       console.log(cserverUrl)\n       let response = await fetch(cserverUrl.serverUrl + '/hello-world')\n       console.info(response)\n       let text = await response.text()\n       console.info(text)\n        return  text\n    } catch(error)  { \n        console.error(error)\n        throw error\n    }\n  }\n}\nexport default new HelloWorldService()\n"," import { serverUrl } from './Environment'\n\n class HelloWorldBeanService {\n  \n  async getMessage () {\n    try {\n       const cserverUrl = await serverUrl()\n       console.info('HelloWorldBeanService')\n       console.info(cserverUrl.serverUrl)\n       console.info(cserverUrl.env)\n\n      let response = await fetch(cserverUrl.serverUrl + '/hello-world-bean')\n      console.log(response)\n      let json = await response.json()\n      let message = json.message\n       console.log(message)\n      return  message\n    } catch(error)  { \n        console.error(error)\n        throw error\n    }\n\n   }\n}\nexport default new HelloWorldBeanService()\n","import React from 'react'\nimport {Component} from 'react'\nimport HelloWorldService from  './service/HelloWorldService'\nimport HelloWorldBeanService from './service/HelloWorldBeanService'\nexport default class Welcome extends Component {\n    constructor(pops){\n        super(pops)\n        this.helloWorldService= this.helloWorldService.bind(this)\n        this.helloWorldBeanService= this.helloWorldBeanService.bind(this)\n         } \n\n    state = { welcomMessage: '' } \n\n    render() { \n        return <div>\n                   Welcome\n                   <div>\n                       Click here to displaye hello world\n                       <button id='helloWorldButton' onClick={ this.helloWorldService } > Get Welcome Message </button>\n                    <button id='helloWorldBeanButton' onClick={ this.helloWorldBeanService } > Get Welcome Bean Message </button>\n                   </div>\n                   <div id='welcomeMessage'>\n                       { this.state.welcomMessage } \n                   </div>\n            </div>\n     }\n\n    async helloWorldService() {   \n         const data  = await HelloWorldService.getMessage()\n         console.log(data)\n         this.setState({welcomMessage: data })  \n      } \n      \n async helloWorldBeanService() {    \n         const data  = await HelloWorldBeanService.getMessage()\n         console.log(data)\n         this.setState({welcomMessage: data })  \n      }   \n}","import React from 'react'\nimport {Component} from 'react'\n\nexport default class TodoList extends Component { \n    render()  { \n            return (<div>To do list</div>)\n        }\n}","import React from 'react'\nimport {Component} from 'react'\nimport Login from './Login'\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom'\nimport Welcome from './Welcome';\nimport TodoList from './TodoList'\n\nexport default class TodoApp extends Component \n{\n    render(){\n        return(\n           <>\n               <Router>\n                   <div>\n                     <Switch>\n                       <Route path=\"/\" exact          component = {Login}/>\n                       <Route path=\"/login\"           component = {Login}/>\n                       <Route path=\"/welcome\"         component = {Welcome}/>\n                       <Route path=\"/todos\"            component = {TodoList}/>\n                       <Route                         component = {ErrorMessage}/>\n                     </Switch>\n                   </div>\n               </Router>\n            </>\n         )\n    }\n\n\n    }\n\n    function ErrorMessage(){\n        return <div> Unknown Path</div>\n     }\n","import React from 'react'\nimport {Component} from 'react'\nimport TodoApp from './TodoApp'\n\nexport default class App extends Component { \n    render()  { \n            console.info('app')\n            return (<TodoApp />)\n        }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
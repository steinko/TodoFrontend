{"version":3,"sources":["service/Logger.js","Login.jsx","service/Environment.js","service/HelloWorldService.js","service/HelloWorldBeanService.js","Welcome.jsx","TodoList.jsx","TodoApp.jsx","App.jsx","serviceWorker.js","index.js"],"names":["instance","logger","Login","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","username","password","showSucessMessage","hasLoginFailed","handleChange","bind","assertThisInitialized","loginClick","event","setState","defineProperty","target","name","value","console","log","history","push","react_default","a","createElement","type","onChange","onClick","Component","winston","require","Elasticsearch","esTransportOpts","level","Logger","createLogger","transports","format","json","defaultMeta","service","File","filename","add","Logstash","port","node_name","host","serverUrl","_serverUrl","apply","arguments","_callee","frontendUrl","backendUrl","response","object","regenerator_default","wrap","_context","prev","next","getLogger","info","window","location","hostname","fetch","sent","abrupt","length","env","t0","error","stop","service_HelloWorldService","text","service_HelloWorldBeanService","cserverUrl","message","Welcome","pops","welcomMessage","helloWorldService","helloWorldBeanService","id","HelloWorldService","getMessage","data","HelloWorldBeanService","TodoList","TodoApp","Fragment","react_router_dom","react_router","path","exact","component","ErrorMessage","myLogger","log4javascript","App","ajaxAppender","AjaxAppender","setBatchSize","setSendAllOnUnload","addAppender","onerror","url","lineNumber","errorMsg","TodoApp_TodoApp","Boolean","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ebbc2e3c.chunk.js","sourcesContent":["var winston = require('winston');\nvar Elasticsearch = require('winston-elasticsearch');\n  var instance\n  var logger\n  var esTransportOpts = {\n  level: 'info' }\n\nclass Logger { \n\n    constructor() {\n        logger = winston.createLogger({\n           transports: [\n               new Elasticsearch(esTransportOpts)\n          ]\n       })\n    }\n\n\t static getLogger() { \n     if (!instance)  { \n        instance = new Logger()\n      }\n     return logger\n   }\n\n\n   createLogger () { \n\t    let logger = winston.createLogger({\n           level: 'info',\n           format: winston.format.json(),\n            defaultMeta: { service: 'user-service' },\n            transports: [\n               \n                   new winston.transports.File({ filename: 'combined.log' })\n            ]\n        });\n\n         //\n         // If we're not in production then log to the `console` with the format:\n         // `${info.level}: ${info.message} JSON.stringify({ ...rest }) `\n         // \n         if (process.env.NODE_ENV !== 'production') {\n           logger.add(new winston.transports.Console({\n            format: winston.format.simple()\n        }));\n    }\n\n   }\n\n\n\tstatic addLogging () { \n\t\twinston.add(winston.transports.Logstash, {\n          port: 28777,\n          node_name: 'my node name',\n          host: '127.0.0.1'\n        });\n\n\t}\n}\nexport default Logger","import React from 'react'\nimport {Component} from 'react'\nexport default class Login extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = { username: 'in28minutes',\n                       password: '',\n                       showSucessMessage: true,\n                       hasLoginFailed: false\n                     }\n        this.handleChange = this.handleChange.bind(this)\n        this.loginClick = this.loginClick.bind(this) \n     }\n\n /**\n * Set the evenet as a state\n *\n * @param {event}  The event to be stored.\n */\n     handleChange(event) { \n\n        this.setState({[event.target.name]\n          :event.target.value })\n      }\n\n      loginClick()   {\n        if (this.state.username ==='in28minutes' && this.state.password === 'dummy') { \n           \n            console.log('sucessfull login')\n            console.log(this.state)\n            this.props.history.push(\"/welcome\")\n\n        }\n        else \n         {\n            console.log('loging failure')\n            this.setState ( { showSucessMessage: false }) \n            this.setState (  { hasLoginFailed: true }) \n                      \n          }\n          \n\n      }\n     \n\n    render() { return <div> \n         {this.state.hasLoginFailed && <div>Invalid Credentials</div>}\n         {this.state.showSucessMessage && <div>Sucsessfull Loging</div>}\n\n        User Name:<input type='text' name='username' value= {this.state.username} onChange= {this.handleChange}/>\n        Password: <input type='password' name='password' value= {this.state.password} onChange= {this.handleChange}/>\n        <button onClick= {this.loginClick}>Login</button>\n    </div> }\n}\n"," import Logger from './Logger'\n export async function  serverUrl() {\n     let logger = Logger.getLogger()\n    try {\n      \n      logger.info('Environment')\n      const frontendUrl = window.location.hostname\n      const port = window.location.port\n      logger.info('FrontendUrl')\n      logger.info(frontendUrl)\n      logger.info('port')\n      logger.info(port)\n\n      if ((process.env.NODE_ENV === 'production') || (port.length !== 0)) {\n          const backendUrl = 'http://'+ frontendUrl + ':'+ port + '/backendUrl'\n          logger.info('Backend Url')\n          logger.info(backendUrl)\n          let response = await fetch(backendUrl)\n          let json = await response.json()\n          logger.info('Environment response')\n          logger.info(json)\n          return  json  \n         }\n      else if (port.length === 0) {\n         const object = { serverUrl: \"non\",\n                          env: \"build\"\n                        }\n         return object;\n        }   \n    } catch(error)  { \n        logger.info('Server Url Error')\n        logger.error(error)\n        throw error\n    }\n      \n}","import { serverUrl } from './Environment'\nimport Logger from './Logger'\n\n\nclass HelloWorldService {\n  \n  async getMessage () {\n     let logger = Logger.getLogger()\n     try {\n       logger.info('HelloWorldService')\n       let response = await fetch('http://localhost:8080/hello-world')\n       logger.info('Response:',response)\n       let text = await response.text()\n       logger.info('Resonse Text',text)\n        return  text\n    } catch(error)  { \n        logger.error('Hello World Service',error)\n        throw error\n    }\n  }\n}\nexport default new HelloWorldService()\n"," import { serverUrl } from './Environment'\n import Logger from './Logger'\n\n class HelloWorldBeanService {\n  \n  async getMessage () {\n    let logger = Logger.getLogger();\n    try {\n       const cserverUrl = await serverUrl()\n       logger.info('HelloWorldBeanService')\n       logger.info('Server Url: ',cserverUrl.serverUrl)\n\n       logger.info('Env',cserverUrl.env)\n\n      let response = await fetch('http://localhost:8080/hello-world-bean')\n      logger.info('Response: ',response)\n      let json = await response.json()\n      let message = json.message\n      logger.info('Message',message)\n      return  message\n    } catch(error)  { \n        logger.error('Error Hello world bean',error)\n        throw error\n    }\n\n   }\n}\nexport default new HelloWorldBeanService()\n","import React from 'react'\nimport {Component} from 'react'\nimport HelloWorldService from  './service/HelloWorldService'\nimport HelloWorldBeanService from './service/HelloWorldBeanService'\nexport default class Welcome extends Component {\n    constructor(pops){\n        super(pops)\n        this.helloWorldService= this.helloWorldService.bind(this)\n        this.helloWorldBeanService= this.helloWorldBeanService.bind(this)\n         } \n\n    state = { welcomMessage: '' } \n\n    render() { \n        return <div>\n                   Welcome\n                   <div>\n                       Click here to displaye hello world\n                       <button id='helloWorldButton' onClick={ this.helloWorldService } > Get Welcome Message </button>\n                    <button id='helloWorldBeanButton' onClick={ this.helloWorldBeanService } > Get Welcome Bean Message </button>\n                   </div>\n                   <div id='welcomeMessage'>\n                       { this.state.welcomMessage } \n                   </div>\n            </div>\n     }\n\n    async helloWorldService() {   \n         const data  = await HelloWorldService.getMessage()\n         console.log(data)\n         this.setState({welcomMessage: data })  \n      } \n      \n async helloWorldBeanService() {    \n         const data  = await HelloWorldBeanService.getMessage()\n         console.log(data)\n         this.setState({welcomMessage: data })  \n      }   \n}","import React from 'react'\nimport {Component} from 'react'\n\nexport default class TodoList extends Component { \n    render()  { \n            return (<div>To do list</div>)\n        }\n}","import React from 'react'\nimport {Component} from 'react'\nimport Login from './Login'\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom'\nimport Welcome from './Welcome';\nimport TodoList from './TodoList'\n\n\nexport default class TodoApp extends Component \n{  \n    \n\n\n    render(){\n        return(\n           <>\n               <Router>\n                   <div>\n                     <Switch>\n                       <Route path=\"/\" exact          component = {Login}/>\n                       <Route path=\"/login\"           component = {Login}/>\n                       <Route path=\"/welcome\"         component = {Welcome}/>\n                       <Route path=\"/todos\"            component = {TodoList}/>\n                       <Route                         component = {ErrorMessage}/>\n                     </Switch>\n                   </div>\n               </Router>\n            </>\n         )\n    }\n\n\n    }\n\n    function ErrorMessage(){\n        return <div> Unknown Path</div>\n     }\n","import React from 'react'\nimport {Component} from 'react'\nimport TodoApp from './TodoApp'\nimport log4javascript from 'log4javascript'\n window.myLogger = log4javascript.getLogger();\n\n\nexport default class App extends Component { \n    \n   \n\n     compoentDidMount() { \n         \n\t      var ajaxAppender = new log4javascript.AjaxAppender('/api/logger');\n \t      ajaxAppender.setBatchSize(10); // send in batches of 10\n \t      ajaxAppender.setSendAllOnUnload(); // send all remaining messages on window.beforeunload()\n\t      window.myLogger.addAppender(ajaxAppender);\n\n\t      //report all user console errors\n\t      window.onerror = function(message, url, lineNumber) {\n\t\t   var errorMsg = \"Console error- \"+url+\" : \"+lineNumber + \": \"+message\n\t \t   window.myLogger.error(errorMsg);\n\t       return true;\n         }\n       }\n\n\n    render()  { \n            //Sending error message to server\n            window.myLogger.error(\"test error message\");\n           //Sending info log to server \n            window.myLogger.info(\"test info\");\n            console.info('app')\n            return (<TodoApp />)\n        }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}